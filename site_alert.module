<?php

/**
 * Implements hook_autoload_info().
 */
function site_alert_autoload_info() {
  return array(
    'BlockSiteAlert' => 'includes/block.site_alert.inc',
  );
}

/**
 * Prepares variables for site alert blocks.
 */
function site_alert_preprocess_block(&$variables) {
  $block = $variables['block'];
  if (get_class($block) == 'BlockSiteAlert') {
    if (isset($block->settings['sitealert'])) {
      $variables['classes'][] = 'block-site-alert';
    }
  }
  }

/**
 * Implements hook_config_info().
 */
function site_alert_config_info() {
  $prefixes['site_alert.settings'] = array(
    'label' => t('Site Alert settings'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}

/**
 * Create a new permission to administer Site Alerts.
 *
 * This permission can be given to any role.
 */
function site_alert_permission() {

  return array(
    'administer alerts settings' => array(
      'title' => t('Administer alerts settings'),
      'description' => t('Allow users to administer alerts settings'),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function site_alert_block_info() {
  $blocks = array();
  $default_info = t('Add different color alert messages in a block.');
  $blocks['default'] = array(
    // The name that will appear in the block list.
    'info' => t('Site Alert Block'),
    'description' => $default_info,
    'class' => 'BlockSiteAlert',
  );
  return $blocks;
}




